services:
  # MongoDB service
  mongo:
    image: mongo:latest
    container_name: mongo-summarization
    restart: always
    volumes:
      - mongo-data:/data/db
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=adminpassword
      - MONGO_INITDB_DATABASE=textsummarization
    networks:
      - app-network
    command: --auth
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongosh admin -u admin -p adminpassword --quiet || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Backend API service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: summarization-api
    restart: always
    ports:
      - "8000:8000"
    depends_on:
      mongo:
        condition: service_healthy
    env_file:
      - ./backend/.env
    environment:
      - MONGO_URI=mongodb://admin:adminpassword@mongo:27017/textsummarization?authSource=admin
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: summarization-frontend
    restart: always
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - NEXT_TELEMETRY_DISABLED=1
      - NODE_ENV=production
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

# Shared volumes
volumes:
  mongo-data:
    driver: local

# Network configuration
networks:
  app-network:
    driver: bridge 